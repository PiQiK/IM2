<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HIDDEN EATS</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;600;700&display=swap" rel="stylesheet">
  <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
</head>
<body class="bg-orange-50 min-h-screen" x-data="app" x-init="loadCart()">
  <div class="flex">
    
    <aside class="w-48 bg-white shadow-xl p-4 space-y-6 fixed top-0 bottom-0 left-0 dark:bg-gray-800">
      <div class="text-center font-bold text-2xl text-orange-500 tracking-wide">HIDDEN EATS</div>
      <ul class="space-y-2 text-gray-700 dark:text-gray-200">
        <li class="cursor-pointer font-bold text-orange-500" @click="category = 'üçΩÔ∏è All-Day Breakfast'">üçΩÔ∏è All-Day Breakfast</li>
        <li class="cursor-pointer font-bold text-red-600" @click="category = 'üçõ Rice Meals'">üçõ Rice Meals</li>
        <li class="cursor-pointer font-bold text-yellow-600" @click="category = 'ü•ñ Homemade Pandesal'">ü•ñ Pandesal</li>
        <li class="cursor-pointer font-bold text-green-600" @click="category = '‚≠êÔ∏è Specials'">‚≠êÔ∏è Specials</li>
        <li class="cursor-pointer font-bold text-violet-600" @click="category = '‚ûï Add-Ons'">‚ûï Add-Ons</li>
        <li class="cursor-pointer font-bold text-amber-700" @click="category = '‚òï Beverages'">‚òï Beverages</li>
      </ul>
    </aside>

    
    <main class="ml-48 flex-1 p-8 pb-32">
      <h1 class="text-4xl font-bold text-gray-800 mb-6 dark:text-white" x-text="category"></h1>

      
      <section>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          <template x-for="(item, i) in filteredItems" :key="i">
            <div class='bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 text-center hover:shadow-xl transition-fade flex flex-col justify-between h-full'>
              <img :src="item.img" :alt="item.name" class='rounded-md mb-3 w-full h-40 object-cover'>
              <div>
                <h3 class='text-lg font-semibold text-gray-800 dark:text-white' x-text="item.name"></h3>
                <p class='text-gray-600 dark:text-gray-300'>‚Ç±<span x-text="item.price.toFixed(2)"></span></p>
                <button @click="addToCart(item.name, item.price)" class='mt-3 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700'>Add to Cart</button>
              </div>
            </div>
          </template>
        </div>
      </section>
    </main>

    
    <footer class="fixed bottom-0 left-48 right-0 bg-white dark:bg-gray-800 shadow-inner p-4 border-t flex justify-end space-x-4 z-50">
      <button
        @click="confirmReset = true"
        class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
      >
        Start over
      </button>
      <button @click="viewOrder()" class="bg-gray-800 text-white px-4 py-2 rounded hover:bg-gray-900">View order - ‚Ç±<span x-text="total.toFixed(2)">0.00</span></button>
    </footer>
  </div>

  
  <div x-show="showModal" @click.away="showModal = false" class="fixed inset-0 bg-black bg-opacity-40 z-40 flex items-center justify-center">
    <div class="w-full max-w-md bg-white dark:bg-gray-800 p-6 rounded-xl shadow-2xl">
      <h2 class="text-xl font-bold mb-4 text-center">üßæ Finalize Your Order</h2>

      <div class="mb-6 text-left relative">
        <h3 class="text-md font-bold mb-2 text-gray-800 dark:text-white">Order Summary:</h3>
        <div id="summary-scroll" class="max-h-[200px] overflow-y-auto pr-2 custom-scroll space-y-1 border rounded p-2">
          <ul class="text-sm text-gray-700 dark:text-gray-300 space-y-1">
            <template x-for="item in cart" :key="item.name">
              <li>
                <span x-text="item.name"></span> √ó <span x-text="item.qty"></span> ‚Äî ‚Ç±<span x-text="(item.price * item.qty).toFixed(2)"></span>
              </li>
            </template>
          </ul>
        </div>
        <button
          x-show="cart.length > 3"
          @click="$nextTick(() => document.getElementById('summary-scroll').scrollTo({ top: 9999, behavior: 'smooth' }))"
          class="absolute bottom-0 right-2 bg-white bg-opacity-80 hover:bg-opacity-100 text-gray-500 hover:text-gray-800 rounded-full p-1 shadow-md transition"
          title="Scroll to bottom"
        >
          ‚Üì
        </button>
        <div class="mt-3 font-semibold">
          Total: ‚Ç±<span x-text="total.toFixed(2)"></span>
        </div>
      </div>

      <div class="flex justify-between mt-6">
        <button @click="showModal = false" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded">
          ‚Üê Back to Menu
        </button>
        <button 
          @click="selectPayment('GCash')" 
          class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded"
        >
          Proceed to Payment ‚Üí
        </button>
      </div>
    </div>
  </div>

  
  <div x-show="confirmReset" class="fixed inset-0 bg-black bg-opacity-40 z-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm text-center">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Are you sure?</h2>
      <p class="text-gray-600 mb-6">This will clear your current order and start over.</p>
      <div class="flex justify-center gap-4">
        <button @click="resetCart(); confirmReset = false" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Yes, Start Over</button>
        <button @click="confirmReset = false" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.data('app', () => ({
        confirmReset: false,
        orderType: 'Dine In',
        showModal: false,
        cart: [],
        category: 'üçõ Rice Meals',
        items: [
          { name: 'Cheeseburger Deluxe', price: 150, img: 'cheese_burger.jpg', category: '‚≠êÔ∏è Specials' },
          { name: 'Grilled Pork Teriyaki', price: 160, img: 'grilled_teriyaki.jpg', category: '‚≠êÔ∏è Specials' },
          { name: 'Spam Rice', price: 150, img: 'Spam Rice.jpg', category: 'üçΩÔ∏è All-Day Breakfast' },
          { name: 'New York Hotdog', price: 140, img: 'newyork_hotdog.jpg', category: 'üçΩÔ∏è All-Day Breakfast' },
          { name: 'Chorizo Rice', price: 150, img: 'Chorizo Rice.jpg', category: 'üçΩÔ∏è All-Day Breakfast' },
          { name: 'Burger Steak Rice', price: 120, img: 'burger_steak.jpg', category: 'üçõ Rice Meals' },
          { name: 'Beef Pares Rice', price: 120, img: 'pares.jpg', category: 'üçõ Rice Meals' },
          { name: 'Chicken Katsu Rice', price: 110, img: 'chicken_katsu.jpg', category: 'üçõ Rice Meals' },
          { name: 'Hungarian Rice', price: 130, img: 'Hungarian Rice.jpg', category: 'üçõ Rice Meals' },
          { name: 'Beef Shawarma Rice', price: 110, img: 'Beef Shawarma Rice.jpg', category: 'üçõ Rice Meals' },
          { name: 'Braised Pork Rice', price: 120, img: 'Braised Pork Rice.jpg', category: 'üçõ Rice Meals' },
          { name: 'Sisig Rice', price: 120, img: 'sisig.jpg', category: 'üçõ Rice Meals' },
          { name: 'Buttered Pandesal', price: 8, img: 'Buttered Pandesal.jpg', category: 'ü•ñ Homemade Pandesal' },
          { name: 'Regular Pandesal', price: 7, img: 'Regular Pandesal.jpg', category: 'ü•ñ Homemade Pandesal' },
          { name: 'Extra Rice', price: 25, img: 'Extra Rice.jpg', category: '‚ûï Add-Ons' },
          { name: 'Extra Egg', price: 20, img: 'Extra Egg.jpg', category: '‚ûï Add-Ons' },
          { name: 'Siomai (per piece)', price: 10, img: 'Siomai.jpg', category: '‚ûï Add-Ons' },
          { name: 'Pork Lumpia', price: 10, img: 'Pork Lumpia.jpg', category: '‚ûï Add-Ons' },
          { name: 'Brewed Coffee', price: 50, img: 'coffee.jpg', category: '‚òï Beverages' }
        ],
        get filteredItems() {
          return this.items.filter(i => i.category === this.category);
        },
        get total() {
          return this.cart.reduce((sum, i) => sum + i.price * i.qty, 0);
        },
        addToCart(name, price) {
          const index = this.cart.findIndex(i => i.name === name);
          if (index > -1) this.cart[index].qty++;
          else this.cart.push({ name, price, qty: 1 });
          this.saveCart();
        },
        removeItem(index) {
          this.cart.splice(index, 1);
          this.saveCart();
        },
        viewOrder() {
          if (this.cart.length === 0) {
            alert("Please add items to your cart before checking out.");
            return;
          }
          this.showModal = true;
        },
        resetCart() {
          this.cart = [];
          this.saveCart();
          this.showModal = false;
        },
        saveCart() {
          localStorage.setItem('cart', JSON.stringify(this.cart));
        },
        loadCart() {
          const stored = localStorage.getItem('cart');
          if (stored) this.cart = JSON.parse(stored);
        },
        selectPayment(method) {
          localStorage.setItem('pendingOrder', JSON.stringify({
            cart: this.cart,
            orderType: this.orderType,
            paymentMethod: method,
            total: this.total.toFixed(2)
          }));
          window.location.href = 'payment.html';
        }
      }));
    });
  </script>
</body>
</html>
